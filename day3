################DAY3################
###############start of clear################
  
-------------------Introduction to Clearing--------------------------

Clearing is an operation to target and engage MCA to eliminate or neutralize it from a network or system.

Clear is normally used relative to the removal of barriers or obstacles in mobility operations or the deconfliction of targets for engagement.

clear is defined as an operation to target and engage MCA in order to eliminate or neutralize it from a network or system, and may include actions to interdict, contain, disrupt, or degrade MCA. 


the IR lifecycle consists of four phases.
- Preparation
- Detection and Analysis
- Containment, Eradication, and Recovery
- Post-incident Activity

-------------------kabana lab-------------------

querys
process.executable: “PowerShell.exe”

process.executable: “PowerShell.exe” and event.action: "Network connection"

process.executable: PowerShell.exe and event.action: "Network connection" and not destination.ip:169.254.0.0/16 and not destination.ip:174.16.0.0/16 and not destination.ip:172.16.0.0/16

------------------powershell lab----------------------

PS C:\Windows\system32> Disable-NetAdapter -Name "Ethernet0" (disconect wifi)

PS C:\Windows\system32> Get-History (get history)

---------------------Neutralization and Eradication of MCA from Affected Systems--------------------------------

objective of a clear operation is the quarantine, withdrawal, or destruction of identified threats from the network or system. This is the key phase in accomplishing that objective.

After a system is contained, responders conduct the actual removal of compromised artifacts and any persistence that an attacker may have left behind. In this task, documentation is vitally important.

---------------lab  Identifying Malware on Infected Hosts ---------------------------

cmd commands:
tasklist
C:\Windows\system32> taskkill /pid [Process ID] /F (kill task)
 analyst can view the American Standard Code for Information Interchange (ASCII) contents of the file with the following commands:
C:\Windows\system32>type "[filename]"



powershell commands: 
get-process
PS C:\Windows\system32> Stop-Process -Id [Process ID] -Confirm -PassThru (kill task)
PS C:\Windows\system32> Get-Childitem -Path C:\ -Include *[keyword]* -File -Recurse -force -ErrorAction SilentlyContinue
PS C:\Windows\system32> Get-Childitem -Path C:\ -Include *backdoor* -File -Recurse -force -ErrorAction SilentlyContinue
This command has several parts:
Get-ChildItem: The principle command; it obtains references to each object in the remainder of the query
- -Path C:\: The filepath in which to search
- -Include *backdoor*: Indicates that the form of results must adhere to the regular expression any character and any file extension before or after the keyword “backdoor”
- -File: Indicates that only file objects are accepted
- -Recurse: Allows the query to continue to search through subfolders of the primary filepath
- -ErrorAction SilentlyContinue: Prevents the screen from being filled with possible errors

 analyst can view the American Standard Code for Information Interchange (ASCII) contents of the file with the following commands:
PS C:\Windows\system32> Get-Content “[filename]”

 Since this file is an unknown PowerShell script (and terminals sometimes handle valid terminal commands unusually), it is safest to open it with Notepad.
PS C:\Windows\system32> notepad.exe "C:\Users\Administrator\Favorites\backdoor.ps1"

Run the following command in PowerShell to view the questionable files:
$FindDate=Get-Date -Year 2021 -Month 05 -Day 17

he attacker has shown a propensity to use PowerShell, so search for PowerShell scripts created in the attack window. Run the following command in PowerShell:

PS C:\Windows\system32> Get-ChildItem -Path C:\ -Include *.ps1 -File -Recurse -ErrorAction SilentlyContinue | Where-Object { $_.LastWriteTime -ge $FindDate }

- Get-ChildItem: The principle command; it obtains references to each object in the remainder of the query
- -Path C:\: The filepath in which to search
- -Include *.ps1: Indicates that the form of results must adhere to the regular expression any filename (“*”) with a PowerShell extension (“.ps1”)
- -File: Indicates that only file objects are accepted
- -Recurse: Allows the query to continue to search through subfolders of the primary filepath
- -ErrorAction SilentlyContinue: Prevents the screen from being filled with possible errors
- |: A pipe; sends all the output of the command prior to it to the command following it
- Where-Object { $_.LastWriteTime -ge $FindDate }: A filter that returns only objects that fall within the time windows that were previously established.

----------------lab Removing Malware from Infected Host-----------------------

cmd commands: 
C:\Windows\system32> del "[filename]"




powershell command :
PS C:\Windows\system32> Remove-Item “[filename]”

PS C:\Windows\system32> notepad C:\Windows\System32\drivers\etc\hosts

---------------lab Autorun Registry Keys---------------------

cmd command:
C:\Windows\system32> reg query [key]


powersh command:
PS C:\Windows\system32> Get-ItemProperty -Path [key]


-------------------lab Remove Registry Entries--------------------------

To delete unwanted registry values, use CMD.exe or PowerShell.


1. From the administrator command prompt, enter the following command:

cmd commands:
C:\Windows\system32> reg delete "[Registry Key]" /v "[Value Name]"

powershell commands:
PS C:\Windows\system32> Remove-ItemProperty -Path "[Registry Key]" -Name "[Value Name]"


Another persistence location in the Windows registry is the userinit value of the winlogon key.


2. Check the userinit value of winlogon using PowerShell:
PS C:\Windows\system32>Get-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon"


-----------------lab Restore Registry Entries---------------------
Instead of deleting the entry, restore it to its default state with the following PowerShell command:

powershell command: 
PS C:\Windows\system32> Set-Itemproperty -path 'HKLM:\SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon' -Name 'Userinit' -value 'C:\Windows\system32\userinit.exe,'


-----------------lab recovery / return machine to the network--------------------
Add a firewall rule to block the offending address from the machine (and duplicate this on all machines in the network) using the following PowerShell command:
PS C:\Windows\system32> New-NetFirewallRule -DisplayName "Block Adversary IP address" -Direction Outbound –LocalPort Any -Protocol TCP -Action Block -RemoteAddress 210.210.210.9

NOTE: This firewall rule should be duplicated at the network border as well. In the mission partner network, which uses Vyatta routers and firewalls, the appropriate commands are:

configure
set firewall name MCA-DENY default-action 'drop'
set firewall name MCA-DENY rule 1 source address 210.210.210.0/24
set interfaces ethernet eth2 firewall in name "MCA-DENY"
commit
save
exit

After all persistence mechanisms of the attack are effectively removed and the attackers blocked, restore connectivity using the following PowerShell command:

PS C:\Windows\system32> Enable-NetAdapter -Name "Ethernet0"

###############end of clear################

###############start of enable Hardening################
























































































































































































































































































































































































































